UpdateLemmings()

  for each lemming

    if NOT lemming.removed then
      if (lemming.explosionTimer != 0)
         CountdownReached0 = call lemming.UpdateExplosionTimer()
         if (CountdownReached0)
            skip to next lemming
         end if
      end if

      HandleInteractiveObjects = call lemming.DoCurrentAction()
  
      if (HandleInteractiveObjects)
         call lemming.CheckForInteractiveObjects()
      end if
    end if

  next lemming

  if (UserSetNuking AND ExploderAssignInProgress)
    while (Index_LemmingToBeNuked < NumberOfLemmingsOut AND
           lemming[Index_LemmingToBeNuked].removed)
      Index_LemmingToBeNuked = Index_LemmingToBeNuked + 1
    end while

    if (Index_LemmingToBeNuked >= NumberOfLemmingsOut)
      ExploderAssignInProgress = FALSE
    else
      if (lemming[Index_LemmingToBeNuked].explosionTimer == 0 AND
          lemming[Index_LemmingToBeNuked].currentAction != SPLATTERING AND
          lemming[Index_LemmingToBeNuked].currentAction != EXPLODING)
        lemming[Index_LemmingToBeNuked].explosionTimer = 79
      end if
      Index_LemmingToBeNuked = Index_LemmingToBeNuked + 1
    end if
  end if

end UpdateLemmings

HEAD_MIN_Y = -5
LEMMING_MIN_X = 0
LEMMING_MAX_X = 1647
LEMMING_MAX_Y = 163

MAX_FALLDISTANCECOUNT = 60

HasPixelAt_ClipY(x, y, miny)
  if (y < miny)
    return call HasPixelAt_NoClipY(x, miny)
  else
    return call HasPixelAt_NoClipY(x, y)
  end if
end HasPixelAt_ClipY

lemming.DoCurrentAction(when action=WALKING)

  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex >= 8)
    lemming.animationFrameIndex = lemming.animationFrameIndex - 8
  end if

  lemming.x = lemming.x + lemming.dx
  if (lemming.x >= LEMMING_MIN_X AND lemming.x <= LEMMING_MAX_X)
    if (call HasPixelAt_ClipY(lemming.x,lemming.y, 0) == TRUE)
      // walk, jump, climb, or turn around
      dy = 0
      newy = lemming.y
      while (dy <= 6 and call HasPixelAt_ClipY(lemming.x,newy - 1, -dy - 1) == TRUE)
        dy = dy + 1
        newy = newy - 1
      end while

      if (dy > 6)
        if (lemming.isClimber)
          call lemming.SetToClimbing()
        else
          lemming.dx = -lemming.dx
        end if
        return TRUE
      else 
        if (dy >= 3)
          call lemming.SetToJumping()
          newy = lemming.y - 2
        end if

        lemming.y = newy
        call lemming.CheckForLevelTopBoundary()
        return TRUE
      end if
      
    else
      // walk or fall downwards
      dy = 1
      while (dy <= 3)
        lemming.y = lemming.y + 1
        if (call HasPixelAt_ClipY(lemming.x,lemming.y, dy) == TRUE)
          exit while loop
        end if
        dy = dy + 1
      end while

      if (dy > 3)
        // in this case, lemming becomes a faller
        lemming.y = lemming.y + 1
        call lemming.SetToFalling()
      end if

      if (lemming.y > LEMMING_MAX_Y)
        lemming.removed = TRUE
        return FALSE
      else
        return TRUE
      end if      
    end if
  else
    lemming.dx = -lemming.dx
    return TRUE
  end if

end lemming.DoCurrentAction(WALKING)


lemming.DoCurrentAction(when action=FALLING)

  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex >= 4)
    lemming.animationFrameIndex = lemming.animationFrameIndex - 4
  end if

  if (lemming.fallDistanceCount > 16 AND lemming.isFloater)
    call lemming.SetToFloating()
    return TRUE
  else
    dy = 0
    while (dy < 3 AND call HasPixelAt_ClipY(lemming.x,lemming.y, dy) == FALSE)
      dy = dy + 1
      lemming.y = lemming.y + 1
      if (lemming.y > LEMMING_MAX_Y)
        lemming.removed = TRUE
        return false
      end if
    end while

    if (dy == 3)
      lemming.fallDistanceCount = lemming.fallDistanceCount + 3
      return true
    else
      if (lemming.fallDistanceCount > MAX_FALLDISTANCECOUNT)
        call lemming.SetToSplattering()
        return true
      else
        call lemming.SetToWalking()
        return true
      end if
    end if
  end
  
end lemming.DoCurrentAction(FALLING)


lemming.DoCurrentAction(when action=SPLATTERING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex == 16)
    lemming.removed = TRUE
  end if
  return false  
end lemming.DoCurrentAction(SPLATTERING)


lemming.SetToWalking()
  lemming.currentAction = WALKING
  lemming.animationGraphics = <walking animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -10
end lemming.SetToWalking

lemming.SetToFalling()
  lemming.currentAction = FALLING
  lemming.animationGraphics = <falling animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -10
  lemming.fallDistanceCount = 3
end lemming.SetToFalling

lemming.SetToClimbing()
  lemming.currentAction = CLIMBING
  lemming.animationGraphics = <climbing animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -12
end lemming.SetToClimbing

lemming.SetToJumping()
  lemming.currentAction = JUMPING
  lemming.animationGraphics = <jumping animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -10
end lemming.SetToJumping

lemming.SetToFloating()
  lemming.currentAction = FLOATING
  lemming.animationGraphics = <floating animation>
  lemming.animationFrameIndex = 0
  lemming.floatParametersTableIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -16
end lemming.SetToFloating

lemming.SetToSplattering()
  lemming.currentAction = SPLATTERING
  lemming.animationGraphics = <splattering animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -10

  lemming.dx = 0
  lemming.explosionTimer = 0
  
  call CueSoundEffect(SFX_SPLAT)
end lemming.SetToSplattering


lemming.CheckForLevelTopBoundary()
  if (lemming.y + lemming.frameTopdy < HEAD_MIN_Y)
    lemming.y = HEAD_MIN_Y - 2 - lemming.frameTopdy
    lemming.dx = -lemming.dx
    if (lemming.currentAction == JUMPING)
      call lemming.SetToWalking()
    end if
  end if
end lemming.CheckForLevelTopBoundary

lemming.DoCurrentAction(when action=JUMPING)
  dy = 0
  while (dy < 2 AND call HasPixelAt_ClipY(lemming.x, lemming.y - 1, dy) == TRUE)
    dy = dy + 1
    lemming.y = lemming.y - 1
  end while

  if (dy < 2)
    call lemming.SetToWalking()
  end if

  call lemming.CheckForLevelTopBoundary()
  return TRUE
end lemming.DoCurrentAction(JUMPING)

lemming.DoCurrentAction(when action=CLIMBING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex >= 8)
    lemming.animationFrameIndex = lemming.animationFrameIndex - 8
  end if

  if (lemming.animationFrameIndex <= 3)
    // check if we approached the top
    if (call HasPixelAt_ClipY(lemming.x, lemming.y - 7 - lemming.animationFrameIndex, 0) == FALSE)
      lemming.y = lemming.y - lemming.animationFrameIndex + 2
      call lemming.SetToHoisting()
      call lemming.CheckForLevelTopBoundary()
    end if
    return TRUE
  else
    lemming.y = lemming.y - 1
    // check for overhang or level top boundary 
    if (lemming.y + lemming.frameTopdy < HEAD_MIN_Y
        OR call HasPixelAt_ClipY(lemming.x - lemming.dx, lemming.y - 8, -8) == TRUE)
      call lemming.SetToFalling()
      lemming.dx = -lemming.dx
      lemming.x = lemming.x + lemming.dx + lemming.dx
    end if
    return TRUE
  end if  
end lemming.DoCurrentAction(CLIMBING)

lemming.DoCurrentAction(when action=HOISTING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex <= 4)
    lemming.y = lemming.y - 2
    call lemming.CheckForLevelTopBoundary()
    return TRUE
  else if (lemming.animationFrameIndex == 8)
    call lemming.SetToWalking()
    call lemming.CheckForLevelTopBoundary()
    return TRUE
  else
    return FALSE
  end if
end lemming.DoCurrentAction(HOISTING)

lemming.SetToHoisting()
  lemming.currentAction = HOISTING
  lemming.animationGraphics = <hoisting animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -12
end lemming.SetToHoisting


floatParametersTable:

   dy   animationFrameIndex
0   3      1
1   3      2
2   3      3
3   3      5
4  -1      5
5   0      5
6   1      5
7   1      5
8   2      5
9   2      6
10  2      7
11  2      7
12  2      6
13  2      5
14  2      4
15  2      4

lemming.DoCurrentAction(when action=FLOATING)
  lemming.animationFrameIndex = floatParametersTable[lemming.floatParametersTableIndex].animationFrameIndex
  dy = floatParametersTable[lemming.floatParametersTableIndex].dy

  lemming.floatParametersTableIndex = lemming.floatParametersTableIndex + 1
  if (lemming.floatParametersTableIndex == 16)
    lemming.floatParametersTableIndex = 8
  end if

  if (dy <= 0)
    lemming.y = lemming.y + dy
  else
    miny = 0
    while (dy > 0)
      if (call HasPixelAt_ClipY(lemming.x,lemming.y, miny) == TRUE)
        call lemming.SetToWalking()
        return TRUE
      else
        lemming.y = lemming.y + 1
        dy = dy - 1
        miny = miny + 1
      end if
    end while
  end if

  if (lemming.y > LEMMING_MAX_Y)
    lemming.removed = TRUE
    return FALSE
  else
    return TRUE
  end if      
end lemming.DoCurrentAction(FLOATING)

lemming.DoCurrentAction(when action=BUILDING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex >= 16)
    lemming.animationFrameIndex = lemming.animationFrameIndex - 16
  end if

  if (lemming.animationFrameIndex == 10 AND
      lemming.numberOfBricksLeft <= 3)
    call CueSoundEffect(BUILDER_WARNING)
  end if

  if (lemming.animationFrameIndex == 9 OR
      (lemming.animationFrameIndex == 10 AND lemming.numberOfBricksLeft == 9))
    call lemming.LayBrick()
    return FALSE
  else if (lemming.animationFrameIndex == 0)
    lemming.x = lemming.x + lemming.dx
    lemming.y = lemming.y - 1
    if (lemming.x <= LEMMING_MIN_X OR lemming.x > LEMMING_MAX_X
        OR call HasPixelAt_ClipY(lemming.x,lemming.y - 1, -1) == TRUE)
      lemming.dx = -lemming.dx
      call lemming.SetToWalking()
      call lemming.CheckForLevelTopBoundary()
      return TRUE
    end if

    lemming.x = lemming.x + lemming.dx
    if (call HasPixelAt_ClipY(lemming.x,lemming.y - 1, -1) == TRUE)
      lemming.dx = -lemming.dx
      call lemming.SetToWalking()
      call lemming.CheckForLevelTopBoundary()
      return TRUE
    end if

    lemming.numberOfBricksLeft = lemming.numberOfBricksLeft - 1
    if (lemming.numberOfBricksLeft == 0)
      call lemming.SetToShrugging()
      call lemming.CheckForLevelTopBoundary()
      return TRUE
    end if

    if (call HasPixelAt_ClipY(lemming.x + lemming.dx + lemming.dx, lemming.y - 9, -9) == TRUE OR
        lemming.x <= LEMMING_MIN_X OR lemming.x > LEMMING_MAX_X)
      lemming.dx = -lemming.dx
      call lemming.SetToWalking()
      call lemming.CheckForLevelTopBoundary()
      return TRUE
    end if

    if (lemming.y + lemming.frameTopdy < HEAD_MIN_Y)
      call lemming.SetToWalking()
      call lemming.CheckForLevelTopBoundary()
    end if
    return TRUE
  else
    return TRUE
  end if
end lemming.DoCurrentAction(BUILDING)

lemming.SetToShrugging()
  lemming.currentAction = SHRUGGING
  lemming.animationGraphics = <shrugging animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -10
end lemming.SetToShrugging

lemming.DoCurrentAction(when action=SHRUGGING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex == 8)
    call lemming.SetToWalking()
    return TRUE
  else
    return FALSE
  end if
end lemming.DoCurrentAction(SHRUGGING)

lemming.LayBrick()
  numPixelsFilled = 0

  if (lemming.dx == 1)
    x = lemming.x
  else
    x = lemming.x - 4
  end if

  repeat
    call SetPixelAt(x, lemming.y - 1)
    numPixelsFilled = numPixelsFilled + 1
    x = x + 1
  until (numPixelsFilled == 6)
end lemming.LayBrick


EnterNewLemming()
  if (EntrancesHaveOpened == FALSE)
    return
  end if
  // nextLemmingCountdown is initialized to 20 before start of a level
  nextLemmingCountdown = nextLemmingCountdown - 1
  if (nextLemmingCountdown == 0)
    nextLemmingCountdown = CalculateNextLemmingCountdown()
    if (numLemmingsReleased < numLemmingsTotal)
      entranceIndex = numLemmingsReleased MOD 4
      call lemming[numLemmingsReleased].Initialize()
      lemming[numLemmingsReleased].x = entrance[entranceIndex].lemmingx
      lemming[numLemmingsReleased].y = entrance[entranceIndex].lemmingy
      lemming[numLemmingsReleased].dx = 1
      call lemming[numLemmingsReleased].SetToFalling()
      numLemmingsReleased = numLemmingsReleased + 1
    end if
  end if    
end EnterNewLemming

CalculateNextLemmingCountdown()
  n = 99 - ReleaseRate
  if (n < 0)
    n = n + 256
  end if
  return n / 2 + 4
end CalculateNextLemmingCountdown


lemming.CheckForInteractiveObjects()
  lemming.objectBelow = call ReadObjectMap(lemming.x,lemming.y)
  lemming.objectInFront = call ReadObjectMap(lemming.x + 8*lemming.dx, lemming.y - 8)
  
  if (lemming.objectBelow == EXIT)
    if (lemming.currentAction != FALLING)
      call lemming.SetToExiting()
      call CueSoundEffect(YIPPEE)
    end if
  else if (lemming.objectBelow == FORCE_LEFT)
    lemming.dx = -1
  else if (lemming.objectBelow == FORCE_RIGHT)
    lemming.dx = 1
  else if (IsTrap(lemming.objectBelow))
    trapIndex = GetTrapIndex(lemming.objectBelow)
    if (trap[trapIndex].isActive == FALSE)
      call trap[trapIndex].Activate()  // will set trap[trapIndex].isActive to TRUE, amongst other things
      lemming.removed = TRUE
      call CueSoundEffect(trap[trapIndex].soundEffect)
    end if
  else if (lemming.objectBelow == WATER)
    if (lemming.currentAction != DROWNING)
      call lemming.SetToDrowning()
      call CueSoundEffect(DROWNING)
    end if
  else if (lemming.objectBelow == FIRE)
    if (lemming.currentAction != FRIED)
      call lemming.SetToFried()
      call CueSoundEffect(FRIED)
    end if
  end if
end lemming.CheckForInteractiveObjects()

lemming.SetToExiting()
  lemming.currentAction = EXITING
  lemming.animationGraphics = <exiting animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -13
end lemming.SetToExiting

lemming.DoCurrentAction(when action=EXITING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex == 8)
    NumberOfLemmingsSaved = NumberOfLemmingsSaved + 1
    lemming.removed = TRUE
  end if
  return FALSE
end lemming.DoCurrentAction(EXITING)

lemming.SetToDrowning()
  lemming.currentAction = DROWNING
  lemming.animationGraphics = <drowning animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -10
end lemming.SetToDrowning

lemming.DoCurrentAction(when action=DROWNING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex == 16)
    lemming.removed = TRUE
  else if (call HasPixelAt_NoClipY(lemming.x + 8*lemming.dx, lemming.y) == FALSE)
    lemming.x = lemming.x + lemming.dx
  end if
  return FALSE
end lemming.DoCurrentAction(DROWNING)

lemming.SetToFried()
  lemming.currentAction = FRIED
  lemming.animationGraphics = <fried animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -14
end lemming.SetToFried

lemming.DoCurrentAction(when action=FRIED)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex == 14)
    lemming.removed = TRUE
  end if
  return FALSE
end lemming.DoCurrentAction(FRIED)


lemming.DoCurrentAction(when action=BLOCKING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex == 16)
    lemming.animationFrameIndex = lemming.animationFrameIndex - 16
  end if

  if (call HasPixelAt_ClipY(lemming.x,lemming.y, 0) == FALSE)
    call lemming.SetToWalking()
    lemming.isBlocking = FALSE
    call lemming.RestoreMap()
  end if
  return FALSE
end lemming.DoCurrentAction(BLOCKING)

lemming.RestoreMap()
  WriteObjectMap(lemming.x - 4, lemming.y - 6, lemming.savedMap_xm4ym6)
  WriteObjectMap(lemming.x,     lemming.y - 6, lemming.savedMap_x0ym6)
  WriteObjectMap(lemming.x + 4, lemming.y - 6, lemming.savedMap_xp4ym6)  
  WriteObjectMap(lemming.x - 4, lemming.y - 2, lemming.savedMap_xm4ym2)
  WriteObjectMap(lemming.x,     lemming.y - 2, lemming.savedMap_x0ym2)
  WriteObjectMap(lemming.x + 4, lemming.y - 2, lemming.savedMap_xp4ym2)  
  WriteObjectMap(lemming.x - 4, lemming.y + 2, lemming.savedMap_xm4yp2)
  WriteObjectMap(lemming.x,     lemming.y + 2, lemming.savedMap_x0yp2)
  WriteObjectMap(lemming.x + 4, lemming.y + 2, lemming.savedMap_xp4yp2)  
end lemming.RestoreMap

lemming.SaveMap()
  lemming.savedMap_xm4ym6 = ReadObjectMap(lemming.x - 4, lemming.y - 6)
  lemming.savedMap_x0ym6  = ReadObjectMap(lemming.x,     lemming.y - 6)
  lemming.savedMap_xp4ym6 = ReadObjectMap(lemming.x + 4, lemming.y - 6)  
  lemming.savedMap_xm4ym2 = ReadObjectMap(lemming.x - 4, lemming.y - 2)
  lemming.savedMap_x0ym2  = ReadObjectMap(lemming.x,     lemming.y - 2)
  lemming.savedMap_xp4ym2 = ReadObjectMap(lemming.x + 4, lemming.y - 2)  
  lemming.savedMap_xm4yp2 = ReadObjectMap(lemming.x - 4, lemming.y + 2)
  lemming.savedMap_x0yp2  = ReadObjectMap(lemming.x,     lemming.y + 2)
  lemming.savedMap_xp4yp2 = ReadObjectMap(lemming.x + 4, lemming.y + 2)  
end lemming.SaveMap()

lemming.SetBlockerField()
  WriteObjectMap(lemming.x - 4, lemming.y - 6, FORCE_LEFT)
  WriteObjectMap(lemming.x,     lemming.y - 6, BLOCKER)
  WriteObjectMap(lemming.x + 4, lemming.y - 6, FORCE_RIGHT)  
  WriteObjectMap(lemming.x - 4, lemming.y - 2, FORCE_LEFT)
  WriteObjectMap(lemming.x,     lemming.y - 2, BLOCKER)
  WriteObjectMap(lemming.x + 4, lemming.y - 2, FORCE_RIGHT)  
  WriteObjectMap(lemming.x - 4, lemming.y + 2, FORCE_LEFT)
  WriteObjectMap(lemming.x,     lemming.y + 2, BLOCKER)
  WriteObjectMap(lemming.x + 4, lemming.y + 2, FORCE_RIGHT)  
end lemming.SetBlockerField

lemming.CheckForOverlappingField()
  if      (ReadObjectMap(lemming.x - 4, lemming.y - 6) is one of [FORCE_LEFT,BLOCKER,FORCE_RIGHT])
    return TRUE
  else if (ReadObjectMap(lemming.x,     lemming.y - 6) is one of [FORCE_LEFT,BLOCKER,FORCE_RIGHT])
    return TRUE
  else if (ReadObjectMap(lemming.x + 4, lemming.y - 6) is one of [FORCE_LEFT,BLOCKER,FORCE_RIGHT])
    return TRUE
  else if (ReadObjectMap(lemming.x - 4, lemming.y - 2) is one of [FORCE_LEFT,BLOCKER,FORCE_RIGHT])
    return TRUE
  else if (ReadObjectMap(lemming.x,     lemming.y - 2) is one of [FORCE_LEFT,BLOCKER,FORCE_RIGHT])
    return TRUE
  else if (ReadObjectMap(lemming.x + 4, lemming.y - 2) is one of [FORCE_LEFT,BLOCKER,FORCE_RIGHT])
    return TRUE
  else if (ReadObjectMap(lemming.x - 4, lemming.y + 2) is one of [FORCE_LEFT,BLOCKER,FORCE_RIGHT])
    return TRUE
  else if (ReadObjectMap(lemming.x,     lemming.y + 2) is one of [FORCE_LEFT,BLOCKER,FORCE_RIGHT])
    return TRUE
  else if (ReadObjectMap(lemming.x + 4, lemming.y + 2) is one of [FORCE_LEFT,BLOCKER,FORCE_RIGHT])
    return TRUE
  else
    return FALSE
  end if
end lemming.CheckForOverlappingField

lemming.SetToBlocking()
  lemming.currentAction = BLOCKING
  lemming.animationGraphics = <blocking animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -10
  lemming.isBlocking = TRUE
end lemming.SetToBlocking


lemming.UpdateExplosionTimer()
  lemming.explosionTimer = lemming.explosionTimer - 1
  if (lemming.explosionTimer != 0)
    return FALSE
  else
    if (lemming.currentAction is one of [FRIED, DROWNING, FLOATING, FALLING])
      call lemming.SetToExploding()
      call CueSoundEffect(EXPLOSION)
    else
      call lemming.SetToOhnoing()
      call CueSoundEffect(OHNO)
    end if
    return TRUE
  end if
end lemming.UpdateExplosionTimer

lemming.SetToExploding()
  lemming.currentAction = EXPLODING
  lemming.animationGraphics = <exploding animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -16
  lemming.frameTopdy = -25
end lemming.SetToExploding

lemming.SetToOhnoing()
  lemming.currentAction = OHNOING
  lemming.animationGraphics = <ohnoing animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -10
end lemming.SetToOhnoing

lemming.DoCurrentAction(when action=EXPLODING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex == 52)
    lemming.removed = TRUE
  else if (lemming.animationFrameIndex == 1)
    if (lemming.isBlocking)
      lemming.isBlocking = FALSE
      call lemming.RestoreMap()
    end if
    if (ReadObjectMap(lemming.x,lemming.y) is NOT one of [STEEL, WATER])
      call ApplyExplosionMask(lemming.x - 8, lemming.y - 14) // 16x22 mask
    end if    
  end if
  return FALSE
end lemming.DoCurrentAction(EXPLODING)

lemming.DoCurrentAction(when action=OHNOING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex == 16)
    call lemming.SetToExploding()
    call CueSoundEffect(EXPLOSION)
    return FALSE
  else
    dy = 0
    while (dy < 3 AND call HasPixelAt_ClipY(lemming.x,lemming.y, dy) == FALSE)
      dy = dy + 1
      lemming.y = lemming.y + 1
    end while

    if (lemming.y > LEMMING_MAX_Y)
      lemming.removed = TRUE
      return FALSE
    else
      return TRUE
    end if
  end if
end lemming.DoCurrentAction(OHNOING)


lemming.SetToDigging()
  lemming.currentAction = DIGGING
  lemming.animationGraphics = <digging animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -12
  lemming.isNewDigger = TRUE
end lemming.SetToDigging

lemming.DoCurrentAction(when action=DIGGING)
  if (lemming.isNewDigger)
    lemming.DigOneRow(lemming.y - 2)
    lemming.DigOneRow(lemming.y - 1)
    lemming.isNewDigger = FALSE
  else
    lemming.animationFrameIndex = lemming.animationFrameIndex + 1
    if (lemming.animationFrameIndex >= 16)
      lemming.animationFrameIndex = lemming.animationFrameIndex - 16
    end if
  end

  if (lemming.animationFrameIndex == 0 OR lemming.animationFrameIndex == 8)
    y = lemming.y
    lemming.y = lemming.y + 1

    if (lemming.y > LEMMING_MAX_Y)
      lemming.removed = TRUE
      return FALSE
    end if

    if (lemming.DigOneRow(y) == FALSE)
      call lemming.SetToFalling()
    else if (ReadObjectMap(lemming.x,lemming.y) == STEEL)
      call CueSoundEffect(HITS_STEEL)
      call lemming.SetToWalking()
    end if
    return TRUE
  else
    return FALSE
  end if
end lemming.DoCurrentAction(DIGGING)

// returns FALSE if there are no terrain pixels to remove
lemming.DigOneRow(y)
  dugSomething = FALSE
  n = 1
  x = lemming.x - 4
  y2 = y
  if (y2 < 0)
    y2 = 0
  end if

  while (n <= 9)
    if (call HasPixelAt_ClipY(x,y, 0) == TRUE)
      call RemovePixelAt(x,y2)
      dugSomething = TRUE
    end if
    n = n + 1
    x = x + 1
  end while

  return dugSomething  
end lemming.DigOneRow


lemming.SetToBashing()
  lemming.currentAction = BASHING
  lemming.animationGraphics = <bashing animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -10
end lemming.SetToBashing

lemming.DoCurrentAction(when action=BASHING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex >= 32)
    lemming.animationFrameIndex = lemming.animationFrameIndex - 32
  end if

  index = lemming.animationFrameIndex
  if (index >= 16)
    index = index - 16
  end if

  if (11 <= index AND index <= 15)
    x = lemming.x + lemming.dx

    if (lemming.x < LEMMING_MIN_X OR lemming.x > LEMMING_MAX_X)
      lemming.dx = -lemming.dx
      call lemming.SetToWalking()
    else
      dy = 0
      while (dy < 3 AND call HasPixelAt_ClipY(lemming.x,lemming.y, dy) == FALSE)
        dy = dy + 1
        lemming.y = lemming.y + 1
      end while

      if (dy == 3)
        call lemming.SetToFalling()
      else
        frontObj = ReadObjectMap(lemming.x + lemming.dx*8, lemming.y - 8)

        if (frontObj == STEEL)
          call CueSoundEffect(HITS_STEEL)
        end if

        if (frontObj == STEEL OR
            (frontObj == ONE_WAY_LEFT AND lemming.dx != -1) OR
            (frontObj == ONE_WAY_RIGHT AND lemming.dx != 1))
          lemming.dx = -lemming.dx
          call lemming.SetToWalking()
        end if
      end if
    end if

    return TRUE
  else
    if (2 <= index AND index <= 5)
      call lemming.ApplyBashingMask(index - 2)
      if (lemming.animationFrameIndex == 5)
        n = 0
        x = lemming.x + lemming.dx*8
        y = lemming.y - 6

        while(n < 4 AND call HasPixelAt_NoClipY(x,y) == FALSE)
          n = n + 1
          x = x + lemming.dx
        end while

        if (n == 4)
          call lemming.SetToWalking()
        end if
      end if
    end if

    return FALSE
  end if
end lemming.DoCurrentAction(BASHING)


lemming.DoCurrentAction(when action=MINING)
  lemming.animationFrameIndex = lemming.animationFrameIndex + 1
  if (lemming.animationFrameIndex >= 24)
    lemming.animationFrameIndex = lemming.animationFrameIndex - 24
  end if

  if (lemming.animationFrameIndex == 1)
    call lemming.ApplyMinerMask(lemming.x + lemming.frameLeftdx, lemming.y + lemming.frameTopdy)
    return FALSE
  else if (lemming.animationFrameIndex == 2)
    call lemming.ApplyMinerMask(lemming.x + lemming.dx + lemming.frameLeftdx, 
                                lemming.y + 1 + lemming.frameTopdy)
    return FALSE
  else if (lemming.animationFrameIndex == 3 OR lemming.animationFrameIndex == 15)
    lemming.x = lemming.x + lemming.dx
    if (lemming.x < LEMMING_MIN_X OR lemming.x > LEMMING_MAX_X)
      lemming.dx = -lemming.dx
      call lemming.SetToWalking()
      return TRUE
    end if

    lemming.x = lemming.x + lemming.dx
    if (lemming.x < LEMMING_MIN_X OR lemming.x > LEMMING_MAX_X)
      lemming.dx = -lemming.dx
      call lemming.SetToWalking()
      return TRUE
    end if

    if (lemming.animationFrameIndex == 3)
      lemming.y = lemming.y + 1    
      if (lemming.y > LEMMING_MAX_Y)
        lemming.removed = TRUE
        return FALSE
      end if
    end if

    if (call HasPixelAt_ClipY(lemming.x,lemming.y, 0) == FALSE)
      call lemming.SetToFalling()
      return TRUE
    end if

    belowObj = ReadObjectMap(lemming.x,lemming.y)
    if (belowObj == STEEL)
      call CueSoundEffect(HITS_STEEL)
    end if

    if (belowObj == STEEL OR
        (belowObj == ONE_WAY_LEFT AND lemming.dx != -1) OR
        (belowObj == ONE_WAY_RIGHT))
      lemming.dx = -lemming.dx
      call lemming.SetToWalking()
    end if
    return TRUE        
  else if (lemming.animationFrameIndex == 0)
    lemming.y = lemming.y + 1    
    if (lemming.y > LEMMING_MAX_Y)
      lemming.removed = TRUE
      return FALSE
    else
      return TRUE
    end if
  else
    return FALSE
  end if
end lemming.DoCurrentAction(MINING)

lemming.SetToMining()
  lemming.currentAction = MINING
  lemming.animationGraphics = <mining animation>
  lemming.animationFrameIndex = 0
  lemming.frameLeftdx = -8
  lemming.frameTopdy = -13
  lemming.y = lemming.y + 1
end lemming.SetToMining


ProcessSkillAssignment()
  prioritizedLemming = NONE
  nonPrioritizedLemming = NONE

  loop through each lemming
    if (lemming.removed)
      skip to next lemming
    end if

    x = lemming.x + lemming.frameLeftdx
    y = lemming.y + lemming.frameTopdy

    if (x <= mousex AND mousex <= x + 12 AND y <= mousey AND mousey <= y + 12)
      if (lemming.currentAction IS one of [BLOCKING, BUILDING, SHRUGGING, BASHING, MINING, DIGGING, OHNOING])
        prioritizedLemming = lemming
      else
        nonPrioritizedLemming = lemming
      end if
    end if
  end loop

  if (RightMouseButtonHeldDown OR prioritizedLemming == NONE)
    lemming1 = nonPrioritizedLemming
  else
    lemming1 = prioritizedLemming
  end if
  lemming2 = nonPrioritizedLemming

  if (lemming1 != NONE)
    assignSuccess = call AssignSkill<SelectedSkill>(lemming1, lemming2)
    if (assignSuccess == TRUE)
      call CueSoundEffect(ASSIGNED_SKILL)
    end if
  end if
end ProcessSkillAssignment

AssignSkill<SelectedSkill = CLIMBER>(lemming1, lemming2)
  if (NumSkills[CLIMBER] > 0 AND lemming1.isClimber == FALSE AND
      lemming1.currentAction NOT one of [BLOCKING, SPLATTERING, EXPLODING])
    NumSkills[CLIMBER] = NumSkills[CLIMBER] - 1
    lemming1.isClimber = TRUE
    if (lemming1.currentAction == SHRUGGING)
      lemming1.currentAction = WALKING
    end if
    return TRUE
  else
    return FALSE
  end if
end AssignSkill<CLIMBER>

AssignSkill<SelectedSkill = FLOATER>(lemming1, lemming2)
  if (NumSkills[FLOATER] > 0 AND lemming1.isFloater == FALSE AND
      lemming1.currentAction NOT one of [BLOCKING, SPLATTERING, EXPLODING])
    NumSkills[FLOATER] = NumSkills[FLOATER] - 1
    lemming1.isFloater = TRUE
    return TRUE
  else
    return FALSE
  end if
end AssignSkill<FLOATER>

AssignSkill<SelectedSkill = BOMBER>(lemming1, lemming2)
  if (NumSkills[BOMBER] > 0 AND lemming1.explosionTimer == 0 AND
      lemming1.currentAction NOT one of [OHNOING, EXPLODING, FRIED, SPLATTERING])
    NumSkills[BOMBER] = NumSkills[BOMBER] - 1
    lemming1.explosionTimer = 79
    return TRUE
  else
    return FALSE
  end if
end AssignSkill<BOMBER>

AssignSkill<SelectedSkill = BLOCKER>(lemming1, lemming2)
  if (NumSkills[BLOCKER] > 0 AND 
      lemming1.currentAction IS one of [WALKING, SHRUGGING, BUILDING, BASHING, MINING, DIGGING] AND
      lemming1.CheckForOverlappingField() == FALSE)
    NumSkills[BLOCKER] = NumSkills[BLOCKER] - 1
    call lemming1.SetToBlocking()
    call lemming1.SaveMap()
    call lemming1.SetBlockerField()
    return TRUE
  else
    return FALSE
  end if
end AssignSkill<BLOCKER>

AssignSkill<SelectedSkill = BUILDER>(lemming1, lemming2)
  if (NumSkills[BUILDER] == 0 OR lemming1.y + lemming1.frameTopdy < HEAD_MIN_Y)
    return FALSE
  else if (lemming1.currentAction IS one of [WALKING, SHRUGGING, BASHING, MINING, DIGGING])
    NumSkills[BUILDER] = NumSkills[BUILDER] - 1
    call lemming1.SetToBuilding()
    return TRUE
  else if (lemming2 != NONE AND
           lemming2.currentAction IS one of [WALKING, SHRUGGING, BASHING, MINING, DIGGING])
    NumSkills[BUILDER] = NumSkills[BUILDER] - 1
    call lemming2.SetToBuilding()
    return TRUE
  else
    return FALSE
  end if  
end AssignSkill<BUILDER>

AssignSkill<SelectedSkill = BASHER>(lemming1, lemming2)
  if (NumSkills[BASHER] == 0)
    return FALSE
  else if (lemming1.currentAction IS one of [WALKING, SHRUGGING, BUILDING, MINING, DIGGING])
    selectedLemming = lemming1
  else if (lemming2 != NONE AND
           lemming2.currentAction IS one of [WALKING, SHRUGGING, BUILDING, MINING, DIGGING])
    selectedLemming = lemming2
  else
    return FALSE
  end if

  if (selectedLemming.objectInFront == STEEL)
    call CueSoundEffect(HITS_STEEL)
    return FALSE
  else if ((selectedLemming.objectInFront == ONE_WAY_LEFT AND selectedLemming.dx != -1) OR
           (selectedLemming.objectInFront == ONE_WAY_RIGHT AND selectedLemming.dx != 1))
    return FALSE
  else
    NumSkills[BASHER] = NumSkills[BASHER] - 1
    call selectedLemming.SetToBashing()
    return TRUE
  end if
end AssignSkill<BASHER>

AssignSkill<SelectedSkill = MINER>(lemming1, lemming2)
  if (NumSkills[MINER] == 0)
    return FALSE
  else if (lemming1.currentAction IS one of [WALKING, SHRUGGING, BUILDING, BASHING, DIGGING])
    selectedLemming = lemming1
  else if (lemming2 != NONE AND
           lemming2.currentAction IS one of [WALKING, SHRUGGING, BUILDING, BASHING, DIGGING])
    selectedLemming = lemming2
  else
    return FALSE
  end if

  if (selectedLemming.objectInFront == STEEL)
    call CueSoundEffect(HITS_STEEL)
    return FALSE
  else if (selectedLemming.objectBelow == STEEL
           (selectedLemming.objectInFront == ONE_WAY_LEFT AND selectedLemming.dx != -1) OR
           (selectedLemming.objectInFront == ONE_WAY_RIGHT AND selectedLemming.dx != 1))
    return FALSE
  else
    NumSkills[MINER] = NumSkills[MINER] - 1
    call selectedLemming.SetToMining()
    return TRUE
  end if
end AssignSkill<MINER>

AssignSkill<SelectedSkill = DIGGER>(lemming1, lemming2)
  if (NumSkills[DIGGER] == 0 OR lemming1.objectBelow == STEEL)
    return FALSE
  else if (lemming1.currentAction IS one of [WALKING, SHRUGGING, BUILDING, BASHING, MINING])
    NumSkills[DIGGER] = NumSkills[DIGGER] - 1
    call lemming1.SetToDigging()
    return TRUE
  else if (lemming2 != NONE AND
           lemming2.currentAction IS one of [WALKING, SHRUGGING, BUILDING, BASHING, MINING])
    NumSkills[DIGGER] = NumSkills[DIGGER] - 1
    call lemming2.SetToDigging()
    return TRUE
  else
    return FALSE
  end if  
end AssignSkill<DIGGER>